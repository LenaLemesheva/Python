# типы данных и переменная
# int, float, boolean, str, list, None

# value = None
# print(type(value))

# print(type(a))
# print(type(b))
# value = 1234
# print(type(value))
# s = 'hello \nworld'
# a = 123
# b = 1.23
# print(s) #вывод строки
# print(a, '-',b, '-', s)
# print('{1} - {2} - {0}'.format(a, b, s))
# print(f'{a} - {b} - {s}')

# f = True
# print(f)

# list = ['1', '2', '3', 'hello', 1, 2, 4.5, True]
# print(list)



# Ввод и вывод данных
# print, input

# print('Введите a')
# a = float(input())
# print('Введите b')
# b = float(input())
# print(a, '+', b, '=', a + b)
# print('{} {}'.format(a, b))
# print(f'{a} {b}')



# Арифметические операции
# +, -, *, /, %, //, **
# **, , +, /, //, %, +, -
# (), Сокращенные операции

# a = 1.3
# b = 3
# c = round(a * b, 3)
# print(c)

# a = 3
# a += 5
# print(a)



# Логические операции
# >, >=, <, <=, ==, !=
# not, and, or - yt genfnm s &, |, ^
# is, is not, in, not in
# gen

# f = [1, 2, 3, 4]
# print(f)
# print(not 2 in f)
# is_odd = not f[0] % 2
# print(is_odd)



# Управляющие конструкции
# if, if-else

# a = int(input('a = '))
# b = int(input('b = '))
# if a > b:
#    print(a)
# else:
#    print(b)

# username = input('Введите имя: ')
# if username == 'Маша':
#     print('Ура, это же МАША!')
# elif username == 'Марина':
#     print('Я так ждала Вас, Марина!')
# elif username == 'Ильнар':
#     print('Ильнар - топ)')
# else:
#     print('Привет, ', username)



# Управляющие конструкторы
# while

# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10
# print(inverted)



# Управляющие конструкторы
# while - else

# original = 23
# inverted = 0
# while original != 0:
#     inverted = inverted * 10 + (original % 10)
#     original //= 10
#     print(original)
# else:
#     print('Пожалуй')
#     print('хватит )')
# print(inverted)



# Управляющие конструкторы
# for

# for i in 1,2,3,4,5:
#     print(i**2)

# list = [1,2,3,4,10,5]
# for i in list:
#     print(i)

# r = range(10)
# for i in r:
#     print(i)

# for i in range(1, 10, 2):   # от 1 до 10 с приращением 2
#     print(i)

# for i in 'qwerty':
#     print(i)



# Немного о строках

# text = 'съешь ещё этих мягких французских булок'
# print(len(text))                   # 39
# print('ещё' in text)               # True
# print(text.isdigit())              # False
# print(text.islower())              # True
# print(text.replace('ещё','ЕЩЁ'))   # 
# for c in text:
#     print(c)

# help - стр 45



# Немного о строках

# text = 'съешь ещё этих мягких французских булок'
# print(text[0])                         # c
# print(text[1])                         # ъ
# print(text[len(text)])                 # IndexError
# print(text[len(text)-1])               # к
# print(text[-5])                        # б
# print(text[:])                         # print(text)
# print(text[:2])                        # съ
# print(text[len(text)-2:])              # ок
# print(text[2:9])                       # ешь ещё
# print(text[6:-18])                     # ещё этих мягких
# print(text[0:len(text):6])             # сеикакл
# print(text[::6])                       # сеикакл
# text = text[2:9] + text[-5] + text[:2] # ...




# Списки: введение

# numbers = [1, 2, 3, 4, 5]
# print(numbers)   # [1, 2, 3, 4, 5]

# numbers = list(range(1, 6))
# print(numbers)   # [1, 2, 3, 4, 5]

# numbers[0] = 10
# print(numbers)   # [10, 2, 3, 4, 5]

# for i in numbers:
#     i *= 2
#     print(i)     # [20, 4, 6, 8, 10]
# print(numbers)   # [10, 2, 3, 4, 5]


# colors = ['red', 'green', 'blue']

# for e in colors:
#     print(e)   # red green blue

# for e in colors:
#     print(e*2)   # redred greengreen blueblue

# colors.append('gray')   # добавить в конец
# print(colors == ['red', 'green', 'blue', 'gray'])   # True
# colors.remove('red')   # del colors[0]  # удалить элемент



# Функции

# def f(x):
#     if x == 1:
#         return 'Целое'
#     elif x == 2.3:
#         return 23
#     else:
#         return

# arg = 2.3
# print(f(arg))
# print(type(f(arg)))


# Срезы

#     -8  -7  -6  -5  -4 -3 -2 -1
#      0   1   2   3   4  5  6  7
sp = [11, 20, 43, 74, 95, 6, 7, 8]
# print(sp[2:5]) # со 2 по 4
# print(sp[-3:-1]) # c 5 по 6
# print(sp[1:]) # от 1 до конца (все, кроме первого)
# print(sp[:-1]) # от начала кроме последнего
# print(sp[::2]) # все четные индексы
# print(sp[1::2]) # все нечетные индексы
# print(sp[::-1]) # перевернутый
# print(sp[-3: len(sp)]) # последние 3
# print(sp[-3:]) # последние 3
# print(type(sp[-5:-1])) # срез
# print(type(sp[6])) # элемент

# a - открытие для добавления данных
# r - открытие для чтения данных
# w - открытие для записи данных


# Создаем, изменяем

# with open('file.txt', 'w') as data:
#     data.write('line 1\n')
#     data.write('line 2\n')

# color = ['red', 'green', 'blue']
# data = open('file.txt', 'a')
# data.writelines(color)  # разделителей не будет
# data.write('LINE 12\n')
# data.write('LINE 13\n')
# data.close()


# Читаем

# path = 'file.txt'
# data = open(path, 'r')
# for line in data:
#     print(line)
# data.close()

# exit()


# Функции и модули



# import hello        # дергать скрипт из соседнего файла
# print(hello.f(1))

# import hello as h       # переименовать файл
# print(h.f(1))



# def new_string(symbol, count): # умножение символа на число
#     return symbol * count
# print(new_string('!', 5)) # !!!!!
# print(new_string('!'))    # без числа будет ошибка

# def new_string(symbol, count = 3): # умножение символа на конкретное число
#     return symbol * count
# print(new_string('!')) # !!!!!

# def new_string(symbol, count = 3): # умножение 4 на 3
#     return symbol * count
# print(new_string('4')) # 12



# def concatenatio(*params):   # передача неограниченного количества элементов
#     res: str = ""
#     for item in params:
#         res += item
#     return res
# print(concatenatio('a', 's', 'd', 'w')) # asdw
# print(concatenatio('a', '1', 'd', '2')) # a1d2
# print(concatenatio(1, 2, 3, 4)) # общибка, т.к. не строка, а числа

# def concatenatio(*params):   # передача неограниченного количества элементов
#     res: int = 0
#     for item in params:
#         res += item
#     return res
# print(concatenatio(1, 2, 3, 4)) # числа, и получают 1+2+3+4 = 10


# Рекурсия


# def fib(n):
#     if n in [1, 2]:
#         return 1
#     else:
#         return fib(n-1) + fib(n-2)
# list = []
# for e in range(1, 10):
#     list.append(fib(e))
# print(list) # 1 1 2 3 5 8 13 21 34


# Кортежи (массивы)


# a = (3, 4)  # массив
# print(a)    # (3, 4)
# print(a[0]) # элемент 0 из массива, т.е. 3


# Кортеж - это неизменяемый "список"
# t = ()
# print(type(t))                     # tuple
# t = (1,)
# print(type(t))                     # tuple
# t = (1)
# print(type(t))                     # int
# t = (28, 9, 1990)
# print(type(t))                     # tuple
# colors = ('red', 'green', 'blue')
# print(colors)                      # ['red', 'green', 'blue']
# t = tuple(colors)
# print(t)                           # ['red', 'green', 'blue']


# a = (3, 4, 5)  # перебираем кортеж
# for item in a:
#     print(item)


# t = tuple(['red', 'green', 'blue'])  # распаковать кортеж в отдельные переменные
# red, green, blue = t
# print ('r:{} g:{} b:{}'.format(red, green, blue))  # r:red g:green b:blue




# Словари (словари нужны, когда нужно найти количество чего-то в списке)


# Неупорядоченные коллекции произвольных объектов с доступом по ключу

# dictionary = {}
# dictionary = \  # нужен \ чтобы не писать в одну строку
# {
#         'up': '|',    # стрелки
#         'left': '-',
#         'down': '|',
#         'right': '-'
# }
# print(dictionary)    # {'up':'|', 'left':'-', 'down':'|', 'right':'-'}
# print(dictionary['left'])   # -
# # типы ключей могут отличаться


# for k in dictionary.keys():  # получить все ключи
#     print(k)


# for k in dictionary.values():  # получить все значения
#     print(k)


# sp = [1, 1, 2, 2, 2, 4, 5, 5]  # ключ - цифра, значение - количество
# d = {}  # словарь
# for i in sp:   # собираем элементы из списка
#     if i in d:  # если элемент есть в словаре
#         d[i] += 1   # обращаемся к этому элементу и увеличиваем его на 1
#     else:  # иначе
#         d[i] = 1   # на этом элементе заносим 1
# print(d)  # вернет словарь d

# sp = [1, 1, 2, 2, 2, 4, 5, 5] # второй вариант наполнения словаря  
# d = {}  
# for i in sp:
#     d[i] = d.get(i, 0) + 1
# print(d)
# print(list(d.keys()))  # показывает все ключи
# print(list(d.values()))  # показывает все значения
# print(list(d.items()))  # показывает все пары: ключ-значение

# for key, val in d.items(): #  перебираем пары: ключ-значение
#     print(key, val)

# print(dict(sorted(d.items(), key=lambda x: x[1])))  # отсортировать по значению
# print(dict(sorted(d.items(), key=lambda x: -x[1])))  # отсортировать по значению в обратную сторону



# Множества


# colors = {'red', 'green', 'blue'}
# print(colors)                     # {'red', 'green', 'blue'}
# colors.add('red')
# print(colors)                     # {'red', 'green', 'blue'}
# colors.add('gray')
# print(colors)                     # {'red', 'green', 'blue', 'gray'}
# colors.remove('red')
# print(colors)                     # {'green', 'blue', 'gray'}
# # colors.remove('red')  # KeyError: 'red'
# colors.discard('red')  # ok
# print(colors)                     # {'green', 'blue', 'gray'}
# colors.clear()   # {}
# print(colors)                     # set()


# a = {1, 2, 3, 5, 8}
# b = {2, 5, 8, 13, 21}
# c = a.copy()             # c = {1, 2, 3, 5, 8}
# u = a.union(b)           # u = {1, 2, 3, 5, 8, 13, 21}
# i = a.intersection(b)    # i = {8, 2, 5}
# dl = a.difference(b)     # dl = {1, 3}
# dr = b.difference(a)     # dr = {13, 21}

# q = a \
#     .union(b) \
#     .difference(a.intersection(b))
# # {1, 21, 3, 13}

# s = frozenset(a)   # замороженное множество



# Списки


# list1 = [1,2,3,4,5]
# list2 = list1
# for e in list1:
#     print(e)
# print()   # пустая строка
# for e in list2:
#     print(e)

# list1[0] = 123 # меняешь в 1 списки и меняется во 2
# list2[1] = 333 # меняешь во 2 списке и меняется в 1


# list1 = [1,2,3,4,5]
# print(list1.pop())  # удаляет последний элемент
# print(len(list1))   # сколько элементов осталось в листе
# print(list1.pop(2)) # удалить конкретный элемент
# print(list1.insert(2, 11)) # вставить на нужную позицию (11 встанет на позицию 2)
# print(list1.append(11)) # добавить в конец (11 встанет на позицию 5)



# lambda


# def calc1(x):
#     return x+10
# print(calc1(10))

# def calc2(x):
#     return x*10
# print(calc2(10))

# def math(op, x):
#     print(op(x))
# math(calc2, 10)
# math(calc1, 10)



# # def sum(x, y):
# #     return x+y

# #sum = lambda x, y: x+y

# def mylt(x, y):
#     return x*y

# def calc(op, a, b):
#     print(op(a, b))
#     # return op(a, b)

# #calc(sum, 4, 5)
# calc(lambda x, y: x+y, 4, 5)



# list = []
# for i in range(1, 101):
#     if(i%2 == 0):
#         list.append(i)
# print(list)

# list = [i for i in range(1, 101) if i % 2 == 0] # список
# print(list)

# list = [(i, i) for i in range(1, 101) if i % 2 == 0] # кортеж
# print(list)

# def f(x):
#     return x**3
# list = [f(i) for i in range(1, 101) if i % 2 == 0] # список наполнен при помощи функции x**3
# print(list)

# def f(x):
#     return x**3
# list = [(i, f(i)) for i in range(1, 101) if i % 2 == 0] # кортеж наполнен при помощи функции x**3
# print(list)



# Пример: 1 2 3 5 8 15 23 38, надо получить: [(2,4), (8,64), (38,1444)
# path = 'file.txt'  # путь к файлу
# f = open(path, 'r')
# data = f.read + ' ' # считываю все и искусственно добавляю пробел
# f.close()

# numbers = []  # cоздаю пустой список, который буду заполнять в дальнейшем

# while data != '': # пробегаю по всей строке и делаю проверку: пока моя строка не пустая
#     space_pos = data.index(' ') # первая позиция пробела
#     numbers.append(int(data[:space_pos])) # взять, что есть от первого символа до позиции первого пробела, превратить в число и превратить в список числе
#     data = data[space_pos+1:] # обновить строку с учетом того, что обработали, больше использовать не нужно

# out = []  # создали новый список
# for e in numbers: # пробежавшись по исходному
#     if not e % 2: # проверка условия, что тисло четное
#         out.append((e, e ** 2)) # добавили список нового картежа, где первое - число, второе - квадрат этого числа
# print(out)



# def select(f, col): # взяли функцию select
#     return [f(x) for x in col] # формируем список

# def where(f, col): # взяли функцию where
#     return [x for x in col if f(x)] # формируем список

# data = '1 2 3 5 8 15 23 38'.split() # строка, split дает набор строк 

# res = select(int, data)  #  list создон функцией select, где int - преобразование строк в число, набор данных - data
# res = where(lambda x: not x % 2, res)  # функция where, делает проверку на четность
# res = select(lambda x: (x, x**2), res)  # функция select, делает картеж, где первая - число, вторая - квадрат числа
# print(res)



# map


# li = [x for x in range(1, 20)] # создали список
# li = list(map(lambda x:x+10, li)) # создали новый список, где число увеличено на 10
# print(li)



# data = list(map(int,input().split())) # набираю числа, преобразовываю в строку
# print(data)

# data = map(int,input().split()) # тоже самое (число вывелось в столбик)
# for e in data:
#     print(e)



# def where(f, col): # взяли функцию where
#     return [x for x in col if f(x)] # формируем список

# data = '1 2 3 5 8 15 23 38'.split() # строка, split дает набор строк 

# res = map(int, data)  #  list создон функцией map, где int - преобразование строк в число, набор данных - data
# res = where(lambda x: not x % 2, res)  # функция where, делает проверку на четность
# res = list(map(lambda x: (x, x**2), res))  # функция map, делает картеж, где первая - число, вторая - квадрат числа
# print(res)



# filter



# data = [x for x in range(10)]  # создали список
# # res = list(filter(lambda x: x%2==0, data))  # выборка четных элементов
# res = list(filter(lambda x: not x%2, data))  # по-питоновски
# print(res)



# data = '1 2 3 5 8 15 23 38'.split() # строка, split дает набор строк 
# res = map(int, data)  #  list создон функцией map, где int - преобразование строк в число, набор данных - data
# res = filter(lambda x: not x % 2, res)  # функция filter, делает проверку на четность
# res = list(map(lambda x: (x, x**2), res))  # функция map, делает картеж, где первая - число, вторая - квадрат числа
# print(res)


# zip


# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# ids = [4, 5, 9, 14, 7]
# data = list(zip(users, ids)) # набор картежей
# print(data)


# enumerate


# users = ['user1', 'user2', 'user3', 'user4', 'user5']
# data = list(enumerate(users)) # картеж с пронумерованными элементами
# print(data)